version: '3'

volumes:
  production_postgres_data: { }
  production_postgres_data_backups: { }
  production_traefik: { }

networks:
  local:
  internalProxy:
    external:
      name: internalProxy

services:

  django: &django
    build:
      context: .
      dockerfile: ./compose/production/django/Dockerfile
    image: gfbio_dmpt_production_django
    depends_on:
      - postgres
      - redis
    env_file:
      - ./.envs/.production/.django
      - ./.envs/.production/.postgres
    networks:
      - local
      - internalProxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.BRANCH-django.rule=Host(`BRANCH.test.gfbio.dev`)
      - traefik.http.routers.BRANCH-django.entrypoints=web
      - traefik.http.services.BRANCH-django.loadbalancer.server.port=5000

    command: /ci_start

  postgres:
    build:
      context: .
      dockerfile: ./compose/production/postgres/Dockerfile
    image: gfbio_dmpt_production_postgres
    volumes:
      - production_postgres_data:/var/lib/postgresql/data:Z
      - production_postgres_data_backups:/backups:z
    env_file:
      - ./.envs/.production/.postgres
    networks:
      - local

#  traefik:
#    build:
#      context: .
#      dockerfile: ./compose/production/traefik/Dockerfile
#    image: gfbio_dmpt_production_traefik
#    networks:
#      - default
#    depends_on:
#      - django
#    volumes:
#      - production_traefik:/etc/traefik/acme:z
#    ports:
#      - "0.0.0.0:80:80"
#      - "0.0.0.0:443:443"
#      - "0.0.0.0:5555:5555"

  redis:
    image: redis:5.0

  celeryworker:
    <<: *django
    image: gfbio_dmpt_production_celeryworker
    command: /start-celeryworker
    labels:
      - foo

  celerybeat:
    <<: *django
    image: gfbio_dmpt_production_celerybeat
    command: /start-celerybeat
    labels:
      - foo

  flower:
    <<: *django
    image: gfbio_dmpt_production_flower
    command: /start-flower
    labels:
      - foo
